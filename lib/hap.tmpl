global
  log /dev/log    local0
  log /dev/log    local1 notice
  pidfile /var/run/haproxy.pid
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin
  stats timeout 30s
# user haproxy
# group haproxy
# daemon

  # Default SSL material locations
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private

  # Default ciphers to use on SSL-enabled listening sockets.
  # For more information, see ciphers(1SSL).
  ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
  log     global
  mode    http
  option  httplog
  option  dontlognull
  timeout connect 5000
  timeout client  50000
  timeout server  50000
# errorfile 400 /var/log/haproxy/errors/400.http
# errorfile 403 /var/log/haproxy/errors/403.http
# errorfile 408 /var/log/haproxy/errors/408.http
# errorfile 500 /var/log/haproxy/errors/500.http
# errorfile 502 /var/log/haproxy/errors/502.http
# errorfile 503 /var/log/haproxy/errors/503.http
# errorfile 504 /var/log/haproxy/errors/504.http

# http services

<% for (var sidx in services) { %>
frontend <%= services[sidx].name %>_front
  bind *:<%= services[sidx].port %>
  mode http
  default_backend <%= services[sidx].name %>
<% } %>

<% for (var sidx in services) { %>
backend <%= services[sidx].name %>
  mode http
  balance roundrobin
  option forwardfor
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request add-header X-Forwarded-Proto https if { ssl_fc } <% for (var nidx in services[sidx].nodes) { %>
  server <%= services[sidx].name %><%= nidx %> <%= services[sidx].nodes[nidx].ipaddress %>:<%= services[sidx].nodes[nidx].port %> check <% } %>
<%} %>

# tcp services

